from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QObject, pyqtSlot
from upldr_libs.put.put_api import PutApi
from mainwindow import Ui_Upldr
from SettingsWidget import SettingsWidgetUIClass
import sys
import os
from model import Model
import threading


class MainWindowUIClass(Ui_Upldr):
    def __init__(self):
        '''Initialize the super class
        '''
        super().__init__()
        self.model = Model()

    def setupUi(self, MW):
        ''' Setup the UI of the super class, and add here code
        that relates to the way we want our UI to operate.
        '''
        super().setupUi(MW)

        # close the lower part of the splitter to hide the
        # debug window under normal operations
        # self.splitter.setSizes([300, 0])

    def debugPrint(self, msg):
        '''Print the message in the text edit at the bottom of the
        horizontal splitter.
        '''
        self.outputTextBrowser.append(msg)

    def refreshAll(self):
        '''
        Updates the widgets whenever an interaction happens.
        Typically some interaction takes place, the UI responds,
        and informs the model of the change.  Then this method
        is called, pulling from the model information that is
        updated in the GUI.
        '''
        self.fileNameEdit.setText(self.model.getFileName())
        # self.textEdit.setText(self.model.getFileContents())

    def _reset_form(self):
        self.categoryLine.setText("")
        self.tagLine.setText("")
        self.fileNameEdit.setText("")

    # slot
    def returnPressedSlot(self):
        ''' Called when the user enters a string in the line edit and
        presses the ENTER key.
        '''
        fileName = self.lineEdit.text()
        if self.model.isValid(fileName):
            self.model.setFileName(self.lineEdit.text())
            self.refreshAll()
        else:
            m = QtWidgets.QMessageBox()
            m.setText("Invalid file name!\n" + fileName)
            m.setIcon(QtWidgets.QMessageBox.Warning)
            m.setStandardButtons(QtWidgets.QMessageBox.Ok
                                 | QtWidgets.QMessageBox.Cancel)
            m.setDefaultButton(QtWidgets.QMessageBox.Cancel)
            ret = m.exec_()
            self.lineEdit.setText("")
            self.refreshAll()
            self.debugPrint("Invalid file specified: " + fileName)

    # slot
    def uploadSlot(self):
        ''' Called when the user presses the Write-Doc button.
        '''
        self.outputTextBrowser.setText("")
        filename = self.fileNameEdit.text() # .split("/")[-1]
        category = self.categoryLine.text()
        tag = self.tagLine.text()
        self.debugPrint("File: %s" % filename)
        self.debugPrint("Category: %s" % category)
        self.debugPrint("Tag: %s" % tag)
        threading.Thread(target=self._run_upload, args=(filename, category, tag)).start()
        self._reset_form()

    def _run_upload(self, filename, category, tag):
        put = PutApi(False)
        config = put.get_remotes()
        self.debugPrint("Uploading to %s" % config.default)
        th = threading.Thread(target=put.make_request, kwargs={"config": config, "name": filename, "timeout": 1, "category": category, "tag": tag})
        th.start()
        th.join()
        self.debugPrint("Upload Complete")

    # slot
    def browseSlot(self):
        ''' Called when the user presses the Browse button
        '''
        # self.debugPrint( "Browse button pressed" )
        options = QtWidgets.QFileDialog.Options()
        options |= QtWidgets.QFileDialog.DontUseNativeDialog
        fileName, _ = QtWidgets.QFileDialog.getOpenFileName(
            None,
            "QFileDialog.getOpenFileName()",
            "",
            "All Files (*)",
            options=options)
        if fileName:
            # self.debugPrint("setting file name: " + fileName)
            self.fileNameEdit.setText(fileName)
            self.model.setFileName(fileName)
            self.refreshAll()

    def openSettingsSlot(self):
        self.SWidget = QtWidgets.QWidget()
        self.settings_ui = SettingsWidgetUIClass()
        self.settings_ui.setupUi(self.SWidget)
        try:
            # PyInstaller creates a temp folder and stores path in _MEIPASS
            base_path = sys._MEIPASS
        except Exception:
            base_path = os.path.abspath(".")
        self.SWidget.setWindowIcon(QtGui.QIcon(base_path + "/icons/settings-icon.svg"))
        self.SWidget.show()


def main():
    """
    This is the MAIN ENTRY POINT of our application.  The code at the end
    of the mainwindow.py script will not be executed, since this script is now
    our main program.   We have simply copied the code from mainwindow.py here
    since it was automatically generated by '''pyuic5'''.

    """

    try:
        # PyInstaller creates a temp folder and stores path in _MEIPASS
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    MainWindow.setWindowIcon(QtGui.QIcon(base_path + "/icons/upldr-icon.svg"))
    ui = MainWindowUIClass()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())


main()